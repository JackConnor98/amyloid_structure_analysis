# Pymol is installed elsewhere so brings up error but code runs fine
import pymol
# Import PyMOL modules
from pymol import cmd
import os

#############################################################################################################################

# User Input Section

# Save imported pdb files?
save_pdb = True

#############################################################################################################################

# list of pdbs to import taken from pdb_names generated by "get_pdb_names.R"
with open("Output/pdb_names.txt", "r") as file:
    # Skip the first line which contains the column name
    next(file)
    # Initialize an empty list to store the names
    pdb = []
    # Iterate over the lines in the file
    for line in file:
        # Strip any leading/trailing whitespaces and append the name to the list
        pdb.append(line.strip())


# Making output directory
# Check if the directory already exists
if not os.path.exists("Output"):
    os.mkdir("Output")


#############################################################################################################################

# Running PyMol Alignment

#############################################################################################################################

# Set PyMOL to run without GUI
pymol.pymol_argv = ['pymol', '-qc']
pymol.finish_launching()

# Import First chain of PDBs
for i in pdb:
    cmd.fetch(i)

if save_pdb != True:
    # Deleting the PDB files that automatically save

    # Get the directory containing the script
    script_directory = os.path.dirname(os.path.abspath(__file__))

    # Set the directory to the script directory
    directory = script_directory

    for filename in os.listdir(directory):
        if filename.endswith(".cif"):
            file_path = os.path.join(directory, filename)
            os.remove(file_path)


# Clean up PyMOL
for i in pdb:
    pymol.cmd.delete(i)

# Close PyMol
cmd.quit()

#"align" performs a sequence alignment followed by a structural superposition, and then carries out zero or more cycles of
# refinement in order to reject structural outliers found during the fit. "align" does a good job on proteins with decent 
#sequence similarity (identity >30%). For comparing proteins with lower sequence identity, the "super" and "cealign" commands 
#perform better.
